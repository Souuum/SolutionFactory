// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int         @id @default(autoincrement())
  email          String      @unique
  securityNumber String      @unique
  phone          String      @unique
  hashedPassword String
  role           String      @default("USER")
  lastName       String
  firstName      String
  gender         String
  birthDate      DateTime
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  patients       Patient[]
  tokens         Token[]
  sessions       Session[]
  medecin        Medecin?
  pharmacien     Pharmacien?
}

model Patient {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  securityNumber String
  userId         Int
  lastName       String
  firstName      String
  gender         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  ordonnance     Ordonnance[]
}

model Medecin {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id])
  userId      Int          @unique
  rpps        String       @unique
  cabinet     String
  specialty   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  ordonnances Ordonnance[]
}

model Pharmacien {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  rpps      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ordonnance {
  id            Int            @id @default(autoincrement())
  patient       Patient        @relation(fields: [patientId], references: [id])
  patientId     Int
  medecin       Medecin        @relation(fields: [createdBy], references: [id])
  createdBy     Int
  prescriptions Prescription[]
}

model Drug {
  id               Int            @id
  name             String
  pharmaShape      String[]
  ammStatus        String
  ammProcType      String
  commercial       String
  ammDate          DateTime
  bdmStatus        String
  euroAutorization String
  holder           String
  monitoring       Boolean
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  prescriptions    Prescription[]
}

model Prescription {
  id           Int        @id @default(autoincrement())
  ordonnance   Ordonnance @relation(fields: [ordonnanceId], references: [id])
  ordonnanceId Int
  drug         Drug       @relation(fields: [drugId], references: [id])
  drugId       Int
  description  String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }
